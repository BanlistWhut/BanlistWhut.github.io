(window.webpackJsonp=window.webpackJsonp||[]).push([[273],{649:function(t,r,a){"use strict";a.r(r);var e=a(27),v=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("本章节的目的是帮助大家快速上手使用 Spring 提供的 Spring Security oAuth2 搭建一套验证授权及资源访问服务，帮助大家在实现企业微服务架构时能够有效的控制多个服务的统一登录、授权及资源保护工作")]),t._v(" "),a("h2",{attrs:{id:"什么是-oauth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-oauth"}},[t._v("#")]),t._v(" 什么是 oAuth")]),t._v(" "),a("p",[t._v("oAuth 协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是 oAuth 的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此 oAuth 是安全的。")]),t._v(" "),a("h2",{attrs:{id:"什么是-spring-security"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-security"}},[t._v("#")]),t._v(" 什么是 Spring Security")]),t._v(" "),a("p",[t._v("Spring Security 是一个安全框架，前身是 Acegi Security，能够为 Spring 企业应用系统提供声明式的安全访问控制。Spring Security 基于 Servlet 过滤器、IoC 和 AOP，为 Web 请求和方法调用提供身份确认和授权处理，避免了代码耦合，减少了大量重复代码工作。")]),t._v(" "),a("h2",{attrs:{id:"为什么需要-oauth2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-oauth2"}},[t._v("#")]),t._v(" 为什么需要 oAuth2")]),t._v(" "),a("h3",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),a("p",[t._v("我们假设你有一个“云笔记”产品，并提供了“云笔记服务”和“云相册服务”，此时用户需要在不同的设备（PC、Android、iPhone、TV、Watch）上去访问这些“资源”（笔记，图片）")]),t._v(" "),a("p",[t._v("那么用户如何才能访问属于自己的那部分资源呢？此时传统的做法就是提供自己的账号和密码给我们的“云笔记”，登录成功后就可以获取资源了。但这样的做法会有以下几个问题：")]),t._v(" "),a("ul",[a("li",[t._v("“云笔记服务”和“云相册服务”会分别部署，难道我们要分别登录吗？")]),t._v(" "),a("li",[t._v("如果有第三方应用程序想要接入我们的“云笔记”，难道需要用户提供账号和密码给第三方应用程序，让他记录后再访问我们的资源吗？")]),t._v(" "),a("li",[t._v("用户如何限制第三方应用程序在我们“云笔记”的授权范围和使用期限？难道把所有资料都永久暴露给它吗？")]),t._v(" "),a("li",[t._v("如果用户修改了密码收回了权限，那么所有第三方应用程序会全部失效。")]),t._v(" "),a("li",[t._v("只要有一个接入的第三方应用程序遭到破解，那么用户的密码就会泄露，后果不堪设想。")])]),t._v(" "),a("p",[t._v("为了解决如上问题，oAuth 应用而生。")]),t._v(" "),a("h3",{attrs:{id:"名词解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#名词解释"}},[t._v("#")]),t._v(" 名词解释")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("第三方应用程序（Third-party application）：")]),t._v(" 又称之为客户端（client），比如上节中提到的设备（PC、Android、iPhone、TV、Watch），我们会在这些设备中安装我们自己研发的 APP。又比如我们的产品想要使用 QQ、微信等第三方登录。对我们的产品来说，QQ、微信登录是第三方登录系统。我们又需要第三方登录系统的资源（头像、昵称等）。对于 QQ、微信等系统我们又是第三方应用程序。")]),t._v(" "),a("li",[a("strong",[t._v("HTTP 服务提供商（HTTP service）：")]),t._v(" 我们的云笔记产品以及 QQ、微信等都可以称之为“服务提供商”。")]),t._v(" "),a("li",[a("strong",[t._v("资源所有者（Resource Owner）：")]),t._v(" 又称之为用户（user）。")]),t._v(" "),a("li",[a("strong",[t._v("用户代理（User Agent）：")]),t._v(" 比如浏览器，代替用户去访问这些资源。")]),t._v(" "),a("li",[a("strong",[t._v("认证服务器（Authorization server）：")]),t._v(" 即服务提供商专门用来处理认证的服务器，简单点说就是登录功能（验证用户的账号密码是否正确以及分配相应的权限）")]),t._v(" "),a("li",[a("strong",[t._v("资源服务器（Resource server）：")]),t._v(" 即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。简单点说就是资源的访问入口，比如上节中提到的“云笔记服务”和“云相册服务”都可以称之为资源服务器。")])]),t._v(" "),a("h3",{attrs:{id:"交互过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交互过程"}},[t._v("#")]),t._v(" 交互过程")]),t._v(" "),a("p",[t._v('oAuth 在 "客户端" 与 "服务提供商" 之间，设置了一个授权层（authorization layer）。"客户端" 不能直接登录 "服务提供商"，只能登录授权层，以此将用户与客户端区分开来。"客户端" 登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。"客户端" 登录授权层以后，"服务提供商" 根据令牌的权限范围和有效期，向 "客户端" 开放用户储存的资料。')]),t._v(" "),a("p",[a("img",{attrs:{src:"http://www.qfdmy.com/wp-content/uploads/2019/08/3c7e14f03211681.png",alt:"img"}})])])}),[],!1,null,null,null);r.default=v.exports}}]);