(window.webpackJsonp=window.webpackJsonp||[]).push([[287],{663:function(e,n,t){"use strict";t.r(n);var a=t(27),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"什么是负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是负载均衡"}},[e._v("#")]),e._v(" 什么是负载均衡")]),e._v(" "),t("p",[e._v("负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。")]),e._v(" "),t("p",[e._v("负载均衡，英文名称为 Load Balance，其意思就是分摊到多个操作单元上进行执行，例如 Web 服务器、FTP 服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。")]),e._v(" "),t("h2",{attrs:{id:"nginx-实现负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-实现负载均衡"}},[e._v("#")]),e._v(" Nginx 实现负载均衡")]),e._v(" "),t("ul",[t("li",[e._v("Nginx 作为负载均衡服务器，用户请求先到达 Nginx，再由 Nginx 根据负载配置将请求转发至 Tomcat 服务器")]),e._v(" "),t("li",[e._v("Nginx 负载均衡服务器：192.168.141.121:80")]),e._v(" "),t("li",[e._v("Tomcat1 服务器：192.168.141.121:8081")]),e._v(" "),t("li",[e._v("Tomcat2 服务器：192.168.141.121:8082")]),e._v(" "),t("li",[e._v("修改 "),t("code",[e._v("/usr/local/docker/nginx/conf")]),e._v(" 目录下的 "),t("code",[e._v("nginx.conf")]),e._v(" 配置文件：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("user  nginx;\nworker_processes  1;\nevents {\n    use epoll;\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    upstream myapp1 {\n        server 192.168.141.121:8081 weight=10;\n        server 192.168.141.121:8082 weight=10;\n    }\n    server {\n        listen 80;\n        server_name nginx.funtl.com;\n        location / {\n            proxy_pass http://myapp1;\n            index index.jsp index.html index.htm;\n        }\n    }\n}\n")])])]),t("h2",{attrs:{id:"相关配置说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关配置说明"}},[e._v("#")]),e._v(" 相关配置说明")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 定义负载均衡设备的 Ip及设备状态 \nupstream myServer {\n    server 127.0.0.1:9090 down;\n    server 127.0.0.1:8080 weight=2;\n    server 127.0.0.1:6060;\n    server 127.0.0.1:7070 backup;\n}\n")])])]),t("p",[e._v("在需要使用负载的 Server 节点下添加")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("proxy_pass http://myServer;\n")])])]),t("ul",[t("li",[t("code",[e._v("upstream")]),e._v("：每个设备的状态:")]),e._v(" "),t("li",[t("code",[e._v("down")]),e._v("：表示当前的 "),t("code",[e._v("server")]),e._v(" 暂时不参与负载")]),e._v(" "),t("li",[t("code",[e._v("weight")]),e._v("：默认为 1 "),t("code",[e._v("weight")]),e._v(" 越大，负载的权重就越大。")]),e._v(" "),t("li",[t("code",[e._v("max_fails")]),e._v("：允许请求失败的次数默认为 1 当超过最大次数时，返回 "),t("code",[e._v("proxy_next_upstream")]),e._v(" 模块定义的错误")]),e._v(" "),t("li",[t("code",[e._v("fail_timeout")]),e._v(":"),t("code",[e._v("max_fails")]),e._v(" 次失败后，暂停的时间。")]),e._v(" "),t("li",[t("code",[e._v("backup")]),e._v("：其它所有的非 "),t("code",[e._v("backup")]),e._v(" 机器 "),t("code",[e._v("down")]),e._v(" 或者忙的时候，请求 "),t("code",[e._v("backup")]),e._v(" 机器。所以这台机器压力会最轻")])])])}),[],!1,null,null,null);n.default=s.exports}}]);